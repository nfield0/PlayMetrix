import requests, base64
from test_url import baseUrl



# player injuries

def test_add_injury_for_player_injuries():
    url = baseUrl + '/injuries/'
    headers = {'Content-Type': 'application/json'}
    json = {
        "injury_type": "Ankle Sprain",
        "injury_name_and_grade": "Grade 1",
        "injury_location": "Left Ankle",
        "potential_recovery_method_1": "Physical Therapy and rest",
        "potential_recovery_method_2": "Surgery",
        "potential_recovery_method_3": "Rest and Ice",
        "expected_minimum_recovery_time": 24,
        "expected_maximum_recovery_time": 120
    }
    response = requests.post(url, headers=headers, json=json)

    # assert response.headers['Content-Type'] == 'application/json'

    try:
        response_json = response.json()
        assert response_json.get("message") == "Injury inserted successfully"
        assert 'id' in response_json
        assert response_json['id'] == 1
        assert response.status_code == 200  

    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"


def test_add_player():
    url = baseUrl + '/register_player'
    headers = {'Content-Type': 'application/json'}
    json = {
        "player_email": "testplayer@gmail.com",
        "player_password": "Testpassword123!",
        "player_firstname": "Nigel",
        "player_surname": "Farage",
        "player_height": "1.80m",
        "player_gender": "Male",
        "player_dob": "1999-05-31",
        "player_contact_number": "30888802",
        "player_image" : "001231",
        "player_2fa": True
    }
    response = requests.post(url, headers=headers, json=json)
    

    assert response.headers['Content-Type'] == 'application/json'

    try:
        
        response_json = response.json()
        assert response_json.get('detail') == "Player Registered Successfully"
        assert 'id' in response_json
        assert response_json['id'] == 1
        assert response.status_code == 200
    
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"

def test_add_physio():
    url = baseUrl + '/register_physio'
    headers = {'Content-Type': 'application/json'}
    json = {
        "physio_email": "testphysio@gmail.com",
        "physio_password": "Testpassword123!",
        "physio_firstname": "test",
        "physio_surname": "tester",
        "physio_contact_number": "012345",
        "physio_image": "something",
        "physio_2fa": True
    }
    response = requests.post(url, headers=headers, json=json)
    #assert response.status_code == 200
    assert response.headers['Content-Type'] == 'application/json'

    try:
        response_json = response.json()
        assert response_json.get("detail") == "Physio Registered Successfully"
        assert 'id' in response_json
        assert response_json['id'] == 1
    
    except(ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"

def test_add_player_injury():
    url = baseUrl + '/player_injuries/'
    headers = {'Content-Type': 'application/json'}
    with open("Backend\Sample.pdf", "rb") as pdf_file:
             encoded_string = base64.b64encode(pdf_file.read())
             encoded_string = encoded_string.decode() 
    json = {
        "player_id": 1,
        "physio_id": 1,
        "injury_id": 1,
        "date_of_injury": "2021-04-01",
        "expected_date_of_recovery": "2021-05-01",
        "player_injury_report": encoded_string
        
    }
    response = requests.post(url, headers=headers, json=json)

    # assert response.headers['Content-Type'] == 'application/json'

    try:
        response_json = response.json()
        assert response_json.get("message") == "Player Injury inserted successfully"
        assert 'id' in response_json
        assert response_json['id'] == 1
        assert response.status_code == 200  

    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"

def test_get_player_injuries():
    url = baseUrl + '/player_injuries/1'
    headers = {'Content-Type': 'application/json'}
    response = requests.get(url, headers=headers)

    try:
        response_json = response.json()
        expected_data = [{
            "player_injury_id": 1,
            "player_id": 1,
            "physio_id": 1,
            "injury_id": 1,
            "date_of_injury": "2021-04-01",
            "expected_date_of_recovery": "2021-05-01",
            "player_injury_report": ""
        }]
        assert response_json == expected_data
        assert response.status_code == 200
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"


def test_get_player_injury_date():
    url = baseUrl + '/player_injuries/1/date/2021-04-01/injury/1'
    headers = {'Content-Type': 'application/json'}
    response = requests.get(url, headers=headers)

    try:
        response_json = response.json()
        expected_data = {
            "player_injury_id": 1,
            "player_id": 1,
            "physio_id": 1,
            "injury_id": 1,
            "date_of_injury": "2021-04-01",
            "expected_date_of_recovery": "2021-05-01",
            "player_injury_report": ""
        }
        assert response_json == expected_data
        assert response.status_code == 200
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"


def test_get_player_injury_by_id():
    url = baseUrl + '/player_injuries/player_injury/1'
    headers = {'Content-Type': 'application/json'}
    response = requests.get(url, headers=headers)

    try:
        response_json = response.json()
        expected_data = [{
            "player_injury_id": 1,
            "player_id": 1,
            "physio_id": 1,
            "injury_id": 1,
            "date_of_injury": "2021-04-01",
            "expected_date_of_recovery": "2021-05-01",
            "player_injury_report": ""
        }]
        assert response_json == expected_data
        assert response.status_code == 200
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"

def test_update_2_player_injury():
    url = baseUrl + '/player_injuries/1'
    headers = {'Content-Type': 'application/json'}
    json={
        "player_id": 1,
            "physio_id": 1,
            "injury_id": 1,
            "date_of_injury": "2021-04-01",
            "expected_date_of_recovery": "2021-05-01",
            "player_injury_report": None
    }
    response = requests.put(url, headers=headers,json=json)

    try:
        response_json = response.json()
        response_json == "Player Injury updated successfully"
        assert response.status_code == 200
        assert response.headers['Content-Type'] == 'application/json'
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"

def test_update_3_get_player_injuries():
    url = baseUrl + '/player_injuries/1'
    headers = {'Content-Type': 'application/json'}
    response = requests.get(url, headers=headers)

    try:
        response_json = response.json()
        expected_data = [{
            "player_injury_id": 1,
            "player_id": 1,
            "physio_id": 1,
            "injury_id": 1,
            "date_of_injury": "2021-04-01",
            "expected_date_of_recovery": "2021-05-01",
            "player_injury_report": None        }]
        assert response_json == expected_data
        assert response.status_code == 200
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"




def test_z_delete_player_injury():
    url = baseUrl + '/player_injuries/1'
    headers = {'Content-Type': 'application/json'}
    response = requests.delete(url, headers=headers)

    try:
        response_json = response.json()
        response_json.get("message") == "Player Injury deleted successfully"
        assert response.status_code == 200
        assert response.headers['Content-Type'] == 'application/json'
    except (ValueError, AssertionError) as e:
        assert False, f"Test failed: {e}"
    

def test_z_cleanup():
    url = baseUrl + '/cleanup_tests'
    headers = {'Content-Type': 'application/json'}
    response = requests.delete(url, headers=headers)
    assert response.status_code == 200